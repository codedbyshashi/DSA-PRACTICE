// brute force approach
class Solution {
    public int majorityElement(int[] arr) {
        int n = arr.length;
        

        for(int i=0;i<n;i++){
            int count =0;
            for(int j=0;j<n;j++){
                if(arr[i]==arr[j]){
                    count++;
                }
            }
            if(count>n/2){
                return arr[i];
            }
        }
        return -1;
        
    }
}
//Better Approach
class Solution {
    public int majorityElement(int[] nums) {

        Map<Integer,Integer> mpp = new HashMap<>();

        for (int num : nums) {
            mpp.put(num, mpp.getOrDefault(num, 0) + 1);
        }
        for(Map.Entry<Integer,Integer> entry : mpp.entrySet()){
            if(entry.getValue()>nums.length/2) return entry.getKey();
        }
        return -1;
        
    }
}
//Optimal Approach
class Solution {
    public int majorityElement(int[] nums) {

        int n = nums.length;
        int count = 0;
        int ele = 0;
        for(int i=0;i<n;i++){
            if(count ==0){
                count =1;
                ele = nums[i];
            }
            else if(nums[i]==ele){
                count++;
            }
            else{
                count--;
            }
        }
        int count1 =0;
        for(int i=0;i<n;i++){
            if(nums[i]==ele){
                count1++;
            }
        }
        if(count1>n/2){
            return ele;
        }
        return -1;

        
    }
}
