// iterative solution
class Solution {
  public int search(int[] nums, int target) {
    int n = nums.length;
    int low = 0, high = n - 1;

    while (low <= high) {
      int mid = (low+(high-low)/2);(overflow case)     //int mid = (low + high) / 2;(normal case)
      if (nums[mid] == target) {
        return mid;
      } else if (nums[mid] < target) {
        low = mid + 1;
      } else {
        high = mid - 1;
      }
    }
    return -1;
  }
}
// Recursive solution
class Solution {
    public int search(int[] nums, int target) {
        int n = nums.length;

        return func(nums, 0, n - 1, target);
    }

    private int func(int[] nums, int low, int high, int target) {
        if (low > high)
            return -1;
        int mid = (low+(high-low)/2);(overflow case)     //int mid = (low + high) / 2;
        if (nums[mid] == target)
            return mid;
        else if (nums[mid] > target)
            return func(nums, low, mid - 1, target);
        return func(nums, mid + 1, high, target);

    }
}
