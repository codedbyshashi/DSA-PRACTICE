//BRUTE FORCE
class Solution {
    public int maxProduct(int[] nums) {
        int n = nums.length;
        if(n==0) return 0;
        int result = Integer.MIN_VALUE;

        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                int product = 1;
                for(int k=i;k<=j;k++){
                    product *=nums[k];
                }
                result = Math.max(result,product);
            }
        }
        return result;
        
    }
}
//BETTER APPROACH
class Solution {
    public int maxProduct(int[] nums) {
        int n = nums.length;
        if(n==0) return 0;
        int result = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            int product = 1;
            for(int j=i;j<n;j++){  
               product *=nums[j];
                result = Math.max(result,product);
            }
        }
        return result;
        
    }
// OPTIMAL APPROACH
class Solution {
    public int maxProduct(int[] nums) {
        int n = nums.length;
        int pref = 1;
        int suf = 1;
        int result = Integer.MIN_VALUE;

        for(int i =0;i<n;i++){
            if(pref==0) pref =1;
            if(suf==0) suf =1;
            pref *=nums[i];
            suf*=nums[n-i-1];
            result = Math.max(result,Math.max(pref,suf));
        }
        return result;

        
    }
}
}
