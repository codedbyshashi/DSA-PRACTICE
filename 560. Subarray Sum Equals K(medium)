//BRUTE FORCE
class Solution {
  public int subarraySum(int[] nums, int k) {
    int n = nums.length;
    int count = 0;

    for (int i = 0; i < n; i++) {
      for (int j = i; j < n; j++) {
        int sum = 0;
        for (int f = i; f < j; k++) {
          sum += nums[f];
          if (sum == k) count++;
        }
      }
    }
    return count;
  }
}
//BETTER APPROACH
class Solution {
  public int subarraySum(int[] nums, int k) {
    int n = nums.length;
    int count = 0;

    for (int i = 0; i < n; i++) {
        int sum = 0;
      for (int j = i; j < n; j++) {
        sum +=nums[j];
          if (sum == k) count++;
        }
      } 
    return count;
  }
}
//OPTIMAL APPROACH
class Solution {
    public int subarraySum(int[] nums, int k) {
        int n = nums.length;
        int sum = 0;
        int count = 0;
        Map<Integer, Integer> mpp = new HashMap<>();
        mpp.put(0, 1);

        for (int i = 0; i < n; i++) {
            sum += nums[i];
            int rem = sum - k;
            count += mpp.getOrDefault(rem, 0);
            mpp.put(sum, mpp.getOrDefault(sum, 0) + 1);

        }
        return count;

    }
}
